# -*- coding: utf-8 -*-
"""code1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16L7-De0q3Br80nzP3zyQ2TvMSpgFZreB
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'C:/Users/Downloads/Medical Inventory Optimaization Dataset.csv'  # replace with your file path
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(data.head())

# Display basic information about the dataset
print("\nBasic information about the dataset:")
print(data.info())

# Display summary statistics
print("\nSummary statistics:")
print(data.describe())

# Measures of Central Tendency
print("\nMeasures of Central Tendency before cleaning:")
print("Mean:\n", data.mean(numeric_only=True))
print("Median:\n", data.median(numeric_only=True))
print("Mode:\n", data.mode().iloc[0])

# Measures of Dispersion
print("\nMeasures of Dispersion before cleaning:")
print("Variance:\n", data.var(numeric_only=True))
print("Standard Deviation:\n", data.std(numeric_only=True))
print("Range:\n", data.max(numeric_only=True) - data.min(numeric_only=True))

# Skewness and Kurtosis
print("\nSkewness before cleaning:\n", data.skew(numeric_only=True))
print("\nKurtosis before cleaning:\n", data.kurt(numeric_only=True))

# Handling missing values by dropping rows with missing values
data_cleaned = data.dropna()

print("\nMissing values after cleaning:")
print(data_cleaned.isnull().sum())

# Convert date columns to datetime
date_columns = data_cleaned.select_dtypes(include=['object']).apply(pd.to_datetime, errors='ignore').select_dtypes(include=['datetime']).columns
for column in date_columns:
    data_cleaned[column] = pd.to_datetime(data_cleaned[column])

# Display basic statistics of cleaned data
print("\nSummary statistics of cleaned data:")
print(data_cleaned.describe())

# Measures of Central Tendency after cleaning
print("\nMeasures of Central Tendency after cleaning:")
print("Mean:\n", data_cleaned.mean(numeric_only=True))
print("Median:\n", data_cleaned.median(numeric_only=True))
print("Mode:\n", data_cleaned.mode().iloc[0])

# Measures of Dispersion after cleaning
print("\nMeasures of Dispersion after cleaning:")
print("Variance:\n", data_cleaned.var(numeric_only=True))
print("Standard Deviation:\n", data_cleaned.std(numeric_only=True))
print("Range:\n", data_cleaned.max(numeric_only=True) - data_cleaned.min(numeric_only=True))

# Skewness and Kurtosis after cleaning
print("\nSkewness after cleaning:\n", data_cleaned.skew(numeric_only=True))
print("\nKurtosis after cleaning:\n", data_cleaned.kurt(numeric_only=True))

# Calculate correlation matrix using only numeric columns
numeric_columns = data_cleaned.select_dtypes(include=[np.number]).columns
correlation_matrix = data_cleaned[numeric_columns].corr()

print("\nCorrelation matrix:")
print(correlation_matrix)

# Plot heatmap of the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix Heatmap')
plt.show()

# Data Visualization
# Histograms
plt.figure(figsize=(20, 10))
data_cleaned.hist(bins=30, alpha=0.5, figsize=(20, 15))
plt.suptitle('Histograms of All Columns')
plt.show()

# Boxplot for each numerical column
plt.figure(figsize=(10, 6))
sns.boxplot(data=data_cleaned.select_dtypes(include=np.number))
plt.title('Boxplot of All Numerical Columns')
plt.show()

# Scatter plot matrix
sns.pairplot(data_cleaned.select_dtypes(include=np.number))
plt.suptitle('Scatter Plot Matrix of Numerical Columns', y=1.02)
plt.show()